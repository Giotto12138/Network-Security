


Network Working Group                                        J. Lee, Ed.
Request for Comments: 1                              N. Finkelstein, Ed.
Category: Standards Track                                     M. Li, Ed.
                                          JHU Network Security Fall 2019
                                                            October 2019


                       POOP Request For Comments

Abstract

   The POOP (Playground Overlay Operating Protocol) system is designed
   to give students and researchers a layout to implement a transport
   protocol.  This PRFC specifies the protocol for exchange of
   information necessary to create a handshake over Playground.

Status of this Memo

   This document specifies a Playgrounds standards track protocol for
   the Playground Experiment, and requests discussion and suggestions
   for improvements.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (c) 2019 SETH JAMES NIELSON.  All rights reserved.

   This document is used solely for educational purposes.  Any citations
   within this document are also for educational purposes and also for
   technical reference.  If any of these cited elements are protected
   under copyright, their inclusion here falls under Fair Use
   provisions.




















Lee, et al.                  Standards Track                    [Page 1]

RFC 1                            PRFC's                     October 2019


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . . . 3
   2.  Outline of Interface  . . . . . . . . . . . . . . . . . . . . . 3
     2.1.  Handshake Protocol  . . . . . . . . . . . . . . . . . . . . 3
     2.2.  Data Transfer . . . . . . . . . . . . . . . . . . . . . . . 4
     2.3.  Shutdown Protocol . . . . . . . . . . . . . . . . . . . . . 5
   3.  Packet Definitions  . . . . . . . . . . . . . . . . . . . . . . 6
   4.  Normative References  . . . . . . . . . . . . . . . . . . . . . 8
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . . 8
   Intellectual Property and Copyright Statements  . . . . . . . . . . 9







































Lee, et al.                  Standards Track                    [Page 2]

RFC 1                            PRFC's                     October 2019


1.  Introduction

   This document aims to provide a complete and unified protocol for
   interfacing with the Playground system, for the purposes of creating
   a handshake.  This document outlines the process of creating a
   handshake between the client and the server, and specifies associated
   packet definitions for such purpose.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].


2.  Outline of Interface

   Agents are client and server.  We set the timeout for every step to
   be 1 second.  Our hash mechanism is to set all the values within the
   packet to the desired values, hash to be 0 then compute the hash to
   be 'binascii.crc32(serialized_packet) & 0xffffffff'.  Then set the
   hash of the packet to this hash.

2.1.  Handshake Protocol

   The Playground Handshake protocol MUST function in the following
   manner.  The handshake will be communicated according to the Data
   Transfer protocol.  The agent that sends the initial packet will be
   referred to as the "initiating agent", and the agent receiving the
   first packet will be referred to as the "receiving agent".

   1.  X and Y are random integers in the range [0, 2^32), where 2^32 is
       not included.  HandshakePackets are a POOP Packet Type
       responsible for all handshake initiation activities between
       agents.

   2.  The initiating agent needs to send a HandshakePacket with SYN set
       to a random value X, status set to NOT_STARTED, and the correct
       hash to the other agent to request a connection.

   3.  Upon receiving the HandshakePacket with the correct hash, the
       receiving agent sends back a packet with ACK set to (X + 1) mod
       2^32, SYN set to a random value Y, STATUS sets to SUCCESS, and a
       hash value.  Else, the receiving agent sends back a packet with
       status set to ERROR.

   4.  Upon receiving the HandshakePacket, the initiating agent checks
       if new ACK is (X + 1) mod 2^32 and hash to be correct.  If it is



Lee, et al.                  Standards Track                    [Page 3]

RFC 1                            PRFC's                     October 2019


       correct, the initiating agent sends back to receiving agent a
       HandshakePacket with ACK set to (Y + 1) mod 2^32 (obtained from
       SYN of received packet), SYN set to (X + 1) mod 2^32, status to
       be SUCCESS, and a hash, and acknowledge this connection with
       server.  The connection is considered established on the
       initiating side.  If it is not correct, the initiating agent
       sends back packet with status to be ERROR.

   5.  The server should check that the ACK received is the correct
       value of (Y + 1) mod 2^32.  If it is correct, then the connection
       is considered established on the server side, and full duplex is
       achieved.  If it is not correct, resend a packet with status
       ERROR.

   6.  All ERROR status packets do not need hash.

   7.  If any agent never receives the acknowledgement from the other
       side after timeout or receive a wrong acknowledgement packet
       (either wrong hash, acknowledge...) or ERROR status, it will try
       to resend TWO more times.  If all times failed, it will let go of
       the connection.

   8.  Packets of a type other than HandShake packet should not be sent
       beyond the handshake layer until the handshake has been
       completed.

2.2.  Data Transfer

   1.   Agents will communicate solely by sending each other packets of
        the type DataPacket.  The only exception to this is when you
        received a HandshakePacket with SYN and ACK set and the correct
        hash value, then you need to resend your packet in step 4 of
        Handshake Protocol.
        检查data transfer的时候有没有其他包乱入

   2.   The maximum size of any DataPacket shall be 15000 bytes.
   包的大小限制，切包

过   3.   The data field should be bytes representing all or part of
        another packet.
        过场话，不用管

过   4.   Multiple DataPacket packets with data fields that are identical
        to the data fields of previously sent DataPacket packets may be
        sent.
        有的时候要重传包

过   5.   No bytes representing full or partial packets may be sent other
        than as part of a data field that is identical to the one in
        which they were originally sent.
         重传包除了和原始包一样的数据，不能有其他的




Lee, et al.                  Standards Track                    [Page 4]

RFC 1                            PRFC's                     October 2019


过   6.   All agents set the sequence number on the first packet they send
        to be the random value they generated during the course of the
        Handshake Protocol.
        sequence number取值，已ok

   7.   Sequence numbers will subsequently be assigned according to the
        following rules.  If the data contained in the DataPacket has
        not yet been sent, the sequence number should be 1 greater than
        the greatest sequence number previously sent, mod 2^32.  If the
        data contained in the DataPacket has already been sent
        previously, and is being resent, the sequence number should be
        set to the sequence number of the DataPacket used to send the
        data the first time it was sent.

   8.   Once an agent receives a DataPacket packet, and has confirmed
        that the hash matches the data, it must send back a DataPacket
        with an empty data and seq field, and ACK set to the sequence
        number of the packet it received

   9.   Only one of "ACK" and "data" must be set.  If "ACK" is set,
        "data" and "seq" will be ignored, and if "data" is set, "ACK"
        will be ignored
        不用管

   10.  Once an agent receives confirmation of receipt of a DataPacket
        packet it sent, it can assume that the other agent has received
        the data contained therein
        过场话，不用管

   11.  If no confirmation of receipt of a DataPacket is received within
        an implementation-specified period, the agent should resend the
        DataPacket.
        重传

过   12.  Each agent shall be considered responsible for every packet it
        has acknowledged receipt of at any point
        过场话，不用管

2.3.  Shutdown Protocol

   The Playground shutdown protocol MUST function in the following
   manner.  The shutdown will be communicated according to the Data
   Transfer protocol.

   1.  Assuming two agents to be A1 and A2.  WLOG, A1 wants to
       initialize shutdown protocol.

   2.  After checking that it has received all ACKs from A2, A1 sends a
       ShutdownPacket with FIN as the next sequence number and correct
       hash.  If A1 does not receive any FIN acknowledgement after
       timeout, A1 resends the ShutdownPacket 2 more times.  If A1 never
       hears back from A2, it will shut down by itself.




Lee, et al.                  Standards Track                    [Page 5]

RFC 1                            PRFC's                     October 2019


   3.  Upon receiving the ShutdownPacket with correct FIN, A2 sends ONE
       DataPacket with ACK as the packet's FIN received and hash.  A2
       will shut down at this step.  This step is similar with the
       scenario for A1 already sent FIN and received another FIN, which
       will guarantee shutdown for A1.

   4.  Upon receiving the DataPacket with correct ACK and hash, A1 will
       shut down.


3.  Packet Definitions

   In this section we provide the REQUIRED packet definitions.






































Lee, et al.                  Standards Track                    [Page 6]

RFC 1                            PRFC's                     October 2019


       class PoopPacketType(PacketType):
           DEFINITION_IDENTIFIER = "poop"
           DEFINITION_VERSION = "1.0"


       class DataPacket(PoopPacketType):
           DEFINITION_IDENTIFIER = "poop.datapacket"
           DEFINITION_VERSION = "1.0"

           FIELDS = [
               ("seq", UINT32({Optional: True})),
               ("hash", UINT32),
               ("data", BUFFER({Optional: True})),
               ("ACK", UINT32({Optional: True})),
           ]


       class HandshakePacket(PoopPacketType):
           DEFINITION_IDENTIFIER = "poop.handshakepacket"
           DEFINITION_VERSION = "1.0"

           NOT_STARTED = 0
           SUCCESS = 1
           ERROR = 2

           FIELDS = [
               ("SYN", UINT32({Optional: True})),
               ("ACK", UINT32({Optional: True})),
               ("status", UINT8),
               ("hash", UINT32)
           ]

       class ShutdownPacket(PoopPacketType):
           DEFINITION_IDENTIFIER = "poop.shutdownpacket"
           DEFINITION_VERSION = "1.0"

           SUCCESS = 0
           ERROR = 1

           FIELDS = [
               ("FIN", UINT32),
               ("hash", UINT32)
           ]








Lee, et al.                  Standards Track                    [Page 7]

RFC 1                            PRFC's                     October 2019


4.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2360]  Scott, G., "Guide for Internet Standards Writers", BCP 22,
              RFC 2360, DOI 10.17487/RFC2360, June 1998,
              <https://www.rfc-editor.org/info/rfc2360>.


Authors' Addresses

   Jaron Lee (editor)
   JHU Network Security Fall 2019
   JHU 160 Malone Hall/3400 North Charles St.
   Baltimore, MD  21218
   USA

   Phone:
   Email: jaron.lee@jhu.edu


   Noam Finkelstein (editor)
   JHU Network Security Fall 2019
   JHU 160 Malone Hall/3400 North Charles St.
   Baltimore, MD  21218
   USA

   Phone:
   Email: zli122@jhu.edu


   Max Li (editor)
   JHU Network Security Fall 2019
   JHU 160 Malone Hall/3400 North Charles St.
   Baltimore, MD  21218
   USA

   Phone:
   Email: zli122@jhu.edu









Lee, et al.                  Standards Track                    [Page 8]

RFC 1                            PRFC's                     October 2019


Full Copyright Statement

   Copyright (C) Seth James Nielson (2019).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the PLAYGROUND experiment or
   other associated organizations, except by explicit permission.

   The limited permissions granted above are perpetual and will not be
   revoked by SETH JAMES NIELSON or his successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and SETH JAMES NIELSON and associated academic
   institutions DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The PLAYGROUND framework and student submissions for PLAYGROUND are
   intended to be free of any intellectual property conflicts.  All
   submitting parties, especially students, are not allowed to submit
   source code, specifications, or other components that are known to be
   protected by copyright, patents, or other IP mechanisms.  Students
   submitting creative content grant shared rights and ownership of
   their content to the PLAYGROUND project.  Specifically, any
   submission can be used in future educational settings including
   subsequent PLAYGROUND experiments.

   Any interested party is invited to bring to the experiment director's
   attention any copyrights, patents or patent applications, or other
   proprietary rights which may cover technology that may be currently
   in use without permission.

   It should be noted that these statements have not been reviewed by
   legal counsel.  Moreover, the academic institutions at which
   PLAYGROUND experiments take place may have additional or even
   conflicting copyright and intellectual property rules.  Accordingly,
   concerned parties may need to contact their own lawyer and/or
   resources at their institution to understand the rights and



Lee, et al.                  Standards Track                    [Page 9]

RFC 1                            PRFC's                     October 2019


   limitations associated with code donated to a PLAYGROUND experiment.


















































Lee, et al.                  Standards Track                   [Page 10]

